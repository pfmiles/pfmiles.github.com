<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: design | Meta-Interpretation]]></title>
  <link href="http://pfmiles.github.io/blog/category/design/atom.xml" rel="self"/>
  <link href="http://pfmiles.github.io/"/>
  <updated>2015-08-15T16:21:30+08:00</updated>
  <id>http://pfmiles.github.io/</id>
  <author>
    <name><![CDATA[pf_miles]]></name>
    <email><![CDATA[miles.wy.1@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[java与groovy混编 —— 一种兼顾接口清晰和实现敏捷的开发方式]]></title>
    <link href="http://pfmiles.github.io/blog/java-groovy-mixed"/>
    <updated>2015-03-14T16:07:00+08:00</updated>
    <id>http://pfmiles.github.io/blog/java-groovy-mixed</id>
    <content type="html"><![CDATA[<ol>
<li>有大量平均水平左右的“工人”可被选择、参与进来 —— 这意味着好招人</li>
<li>有成熟的、大量的程序库可供选择 —— 这意味着大多数项目都是既有程序库的拼装，标准化程度高而定制化场景少</li>
<li>开发工具、测试工具、问题排查工具完善，成熟 —— 基本上没有团队愿意在时间紧、任务重的项目情况下去做没有把握的、基础开发工具类的技术试探</li>
<li>有面向对象特性, 适合大型项目开发 —— 无数大型项目已向世人述说，“面向对象”是开发大型软件的优秀代码组织结构</li>
<li>能适应大型团队、多人协作开发 —— 代码需要简单易懂，起码在接口、api层面是这样</li>
</ol>


<p> —— 这是我所理解的“工业化开发编程语言”的概念</p>

<p>很显然, java就是种典型的“工业语言”, 非常流行，很多企业靠它赚钱，很实际；<br/>
但java也是常年被人黑，光是对其开发效率的诟病就已经足够多，不过java始终屹立不倒；</p>

<p>这样的局面其实无所谓高兴还是担忧，理性的程序员有很多种，其中一种是向“钱”看的 —— 我写java代码，就是因为工作需要而已，能帮助我的组织搞定业务，做出项目，这很好；<br/>
当有人说java语言不好的时候，理性的程序员不会陷入宗教式的语言战争之中，他会思考这些人说的是否有道理；如果真的发现整个java平台大势已去，他会毫不犹豫地扭头就走，不过直到目前为止，还没有这种迹象出现;</p>

<p>那么，从这些无数次的口水之争中，我们能否从别人的“战场”上发现一些有用的东西, 来改进我们的开发方式，从而使得java这种已经成为一个“平台”的东西走得更远，赚更多的钱呢？<br/>
答案是“有的”，感谢那些参与口水战争的、各种阵营的年轻程序员们，有了你们，java speaker们才有了更多的思考;</p>

<!-- more -->


<p>我就只谈一个最实际的问题：</p>

<h2>java被吐槽的这些年, 就开发效率这一点而言，到底有哪些东西是值得借鉴的？</h2>

<p>也就是说，到底是哪些主要特性直接导致了某些其它语言在语法上相对于java的优越感？</p>

<h3>丰富的literal定义</h3>

<p>在groovy中定义map和list的惯用方式：</p>

<pre><code>def list = [a, 2 ,3]
def map = [a:0, b:1]
</code></pre>

<p>而java呢？只能先<code>new</code>一个list或map，再一个个add或put进去; 上面这种literal(字面量)形式的写法便捷得多;</p>

<p>而javascript在这方面做得更绝, 我们都用过json，而json其实就是literal形式的object</p>

<p>极端情况下，一门编程语言里的所有数据类型，包括"内建"的和用户自定义的，统统可以写成literal形式;<br/>
在这种情形下，其实这种语言连额外的对象序列化、反序列化机制都不需要了 —— 数据的序列化形式就是代码本身, “代码”和“数据”在形式上被统一了</p>

<p>java对这方面几乎没有任何支持，对于提高编码效率来讲，这是值得学习的一点, 起码“内建”数据结构需要literal写法支持</p>

<h3>first-class function &amp; higher-order function &amp; function literal(lambda)</h3>

<p>无论是js, 还是python/ruby，或是groovy，都可以将函数作为另一个函数的参数传入，以便后者根据执行情况判断是否要调用前者<br/>
或者能够将一个函数作为另一个函数的返回值返回，以便后续再对其进行调用<br/>
这种高阶函数特性，就不要再说java的匿名内部类“能够”实现了, 如果认为匿名内部类已经"够用"了的话，其实就已经与现在的话题“开发效率”相悖了</p>

<p>高阶函数显然是一种值得借鉴的特性，它会让你少写很多很多无聊的“包装”代码;</p>

<p>还有就是匿名函数(lambda)了<br/>
我不喜欢lambda、lambda地称呼这个东西，我更喜欢把它叫做“匿名函数”或者“函数字面量(literal)”, 因为它跟数学上的lambda演算还是有本质区别，叫"lambda"有误导的危险</p>

<p>函数字面量的意思就是说，你可以在任何地方，甚至另一个函数体的调用实参或内部，随时随地地定义另一个新的函数<br/>
这种定义函数的形式，除了“这个函数我只想在这里用一次，所以没必要给它起个名字”这种理由之外，还有一个更重要的理由就是“闭包”了</p>

<p>所谓闭包，其实也是一个函数，但是在这个函数被定义时，其内部所出现的所有"自由变量(即未出现在该函数的参数列表中的变量)"已被当前外层上下文给确定下来了(lexical), 这时候，这个函数拥有的东西不仅仅是一套代码逻辑，还带有被确定下来的、包含那些“自由变量”的一个上下文, 这样这个函数就成为了一个闭包</p>

<p>那么闭包这种东西有什么好呢？其实如果懒散而钻牛角尖地想，闭包的所有能力，是严格地小于等于一个普通的java对象的，也就是说，凡是可以用一个闭包实现的功能，就一定可以通过传入一个对象来实现，但反过来却不行 —— 因为闭包只有一套函数逻辑，而对象可以有很多套，其次很多语言实现的闭包其内部上下文不可变但对象内部属性可变</p>

<p>既然这样，java还要闭包这种东西来干嘛？其实这就又陷入了"匿名内部类可以实现高阶函数"的困境里了 —— 如果我在需要一个闭包的时候，都可以通过定义一个接口再传入一个对象来实现的话，这根本就跟今天的话题“开发效率”背道而驰了</p>

<p>显然，java是需要闭包的</p>

<h3>强大而复杂的静态类型系统</h3>

<p>这和开发效率有关么？<br/>
编程语言不是越“动态”，开发效率越高么？还需要强大而复杂的静态类型系统么？</p>

<p>试想一下这种api定义：</p>

<pre><code>def eat(foo) {
    ...
}
</code></pre>

<p>这里面你认识的东西可能只有'吃'了, 你知道foo是什么么？你知道它想吃什么么？吃完后要不要产出点什么东西？ —— 你什么都不知道<br/>
这种api极易调用出错，这就好比我去买饭，问你想吃什么你说“随便”，但买回肯德基你却说你实际想吃的是麦当劳一样</p>

<p>可能你还会反驳说，不是还有文档么？你把文档写好点不就行了么？ —— 不要逼我再提“匿名内部类”的例子，如果给每个函数写上复杂详尽的文档是个好办法，那就显然 —— again, 与“开发效率”背道而驰了</p>

<p>那么，静态类型系统，这里显然就该用上了</p>

<p>静态类型系统在多人协作开发、甚至团队、组织间协作开发是非常有意义的；<br/>
拥有静态类型系统的编程语言通常都有强大的、带语法提示功能的IDE，这很正常，因为静态类型语言的语法提示功能好做;<br/>
只要把别人的库拿过来，导入IDE，各种函数签名只需扫一眼 —— 很多情况下根本不需要仔细看文档 —— 就已经知道这个函数是干嘛用的了, 合作效率成倍提升;</p>

<p>而且，作为"api"，作为“模块边界”，作为与其它程序员合作的“门面”, 函数签名上能将参数和返回值类型“卡”得越紧越好 —— 这样别人不用猜你这个函数需要传入什么类型，甚至他在IDE里一“点”，这里就给自动填上了 :)</p>

<p>要做到“卡得紧”，光有静态类型系统还不够，这个系统还需强大, 试想一下这个例子:</p>

<pre><code>/**
 * 我只吃香蕉和猪肉，请勿投食其它物品
 */
public void eat(List&lt;Object&gt; list) {
    for(Object o: list) {
        if(o instanceof Banana){
            ... // eating banana
        } else if(o instanceof Pork) {
            ... // eating pork
        } else {
            throw new RuntimeException("System err.");
        }
    }
}
</code></pre>

<p>这段纯java代码已经是“定义精确”的静态类型了<br/>
但如果没有上面那行注释，你很可能会被<code>System err.</code>无数次<br/>
而这行注释之所以是必需的，完全是因为我找不到一个比<code>List&lt;Object&gt;</code>更好的表达“香蕉或猪肉”的形式, 这种情形足以让人开始想念haskell的either monad</p>

<p>在“强大而复杂的类型系统”这一点上，jvm平台上令人瞩目的当属scala了，可惜java没有，这是值得借鉴的</p>

<p>不过这一点的“借鉴”还需java的compiler team发力，我等也只是说说(按照java保守的改进速度，估计<code>HM</code>类型系统是指望不上了)</p>

<h3>动态类型系统，duck-typing</h3>

<p>刚说完静态类型，现在又来说动态类型系统合适么？</p>

<p>然而这与节操无关，我想表达的是，只要是有助于“开发效率”的，都能够借鉴，这是一个理性的java speaker的基本素质</p>

<p>我们在开发项目的时候，大量的编码发生在“函数”或“方法”的内部 —— 这就好比你在屋子里、在家里宅着一样, 是不是应该少一些拘束，多一些直截了当？<br/>
在这种情形下，动态类型系统要不要太爽？ ——</p>

<pre><code>Void visitAssert(AssertTree node, Void arg1) {
    def ahooks = this.hooks[VisitAssertHook.class]
    ahooks.each {it.beforeVisitCondition(node, errMsgs, this.ctx, resolveRowAndCol, setError)}
    scan((Tree)node.getCondition(), arg1);
    ahooks.each {it.afterVisitConditionAndBeforeDetail(node, errMsgs, this.ctx, resolveRowAndCol, setError)}
    scan((Tree)node.getDetail(), arg1);
    ahooks.each {it.afterVisitDetail(node, errMsgs, this.ctx, resolveRowAndCol, setError)}
    return null;
}
</code></pre>

<p>你知道ahooks是什么类型么？你不知道但我(我是编码的人)知道<br/>
你知道ahooks身上有些什么方法可以调么？你同样不知道但我知道</p>

<p>你不知道没关系，只要我知道就行了，因为现在是我在写这段代码；<br/>
这段代码写完以后，我只会把<code>Void visitAssert(AssertTree node, Void arg1)</code>这个类型明确的方法签名提供给你调用，我并不会给你看函数体里面的那坨东西，因此你知不知道上面这些真的没关系</p>

<p>方法内部满是def, 不用书写繁复的<code>List&lt;Map&lt;String, List&lt;Map&lt;Banana, Foo&gt;&gt;&gt;&gt;</code>这种反人类反社会标语, 每个对象我知道它们身上能“点”出些什么来，我只管“点”，跑起来之后<code>invokedynamic</code>会为我搞定一切</p>

<p>动态类型系统 —— 这就是方法内部实现应该有的样子<br/>
哪怕你的方法内部实现就是一坨shi，你也希望这坨shi能尽可能小只一点，这样看起来更清爽是吧？</p>

<p>不要说我太分裂，我要笑你看不穿 —— 静态类型和动态类型既然都有好处，那么他们能放在一起么？<br/>
能的，这里就需要点明这篇文章的政治目的了： “java与groovy混编”<br/>
而且，目前来看，jvm平台上，只有它二者的结合，才能完成动态静态混编的任务</p>

<p>曾经我发出过这样一段感叹：</p>

<blockquote><p>公共api、对外接口声明、应用程序边界...这些对外的“脸面”部分代码，如果拥有scala般强大的类型系统...就好了；而私有代码、内部实现、各种内部算法、逻辑，如果拥有groovy般的动态、简单的类型系统...就好了；综上，如果有门语言，在接口和实现层面分别持有上述特性,就好了</p></blockquote>

<p>这种“理想”中的语言或许某天我有空了会考虑实现一个</p>

<p>而现在，虽说不是scala，但我终于想要在java和groovy身上来试验一把这种开发方式了<br/>
这里我坦白一下为什么没用scala，原因很简单，我在技术选型方面是势利的，scala还不被大多数平均水平的java开发人员(参见"工业化开发编程语言"定义第一条)接受，这直接导致项目的推进会遇到困难<br/>
而相对来讲，我暂且相信大多数java开发人员都还算愿意跨出<code>groovy</code>这一小步，当然这还需要时间证明</p>

<p>好了，下面还剩下一点点无关痛痒的牢骚 ——</p>

<h3>元编程能力</h3>

<p>macro, eval, 编译过程切入, 甚至method missing机制，这些都算“元编程”</p>

<p>元编程能力的强弱直接决定了使用这种语言创作“内部DSL”的能力<br/>
java在元编程方面的能力，几乎为0</p>

<p>这是值得借鉴的</p>

<p>与groovy的混编，顺便也能把groovy的元编程也带进来</p>

<h3>各种奇巧的语法糖</h3>

<p>语法糖，关起门来吃最美味，这也是一种使得“方法内部实现更敏捷”的附加手段<br/>
网上随便下载一份groovy的cheat sheet, 都会列举groovy的那些写代码方面的奇技淫巧<br/>
这些奇技淫巧，在各种脚本语言之间其实都大同小异, 因为他们本来就是抄来抄去的<br/>
结合方法内部的动态类型环境，这一定会进一步缩小方法内部实现代码的体积</p>

<h2>java &amp; groovy混编：一种最“势利”的折衷</h2>

<p>我不去讨论什么语言才是The True Heir of Java, 那会使这篇文章变成一封战书，我只关心如何更好地利用现有开发资源完成项目，高效地帮组织实现利益<br/>
所以说java和groovy的混编是一种最“势利”的折衷，我不想强迫平均水平的开发人员去学习一种完全不同的语言，短期内不会对项目有任何好处，真正想去学的人他自己会找时间去学<br/>
而groovy，说它是java++也不为过，因为java代码直接就可以被groovy编译, groovy完全兼容java语法, 对一般java开发人员来说，这真是太亲切了</p>

<p>这里我要提一下我对“java和groovy混编”的一个个人性质的小尝试 —— <a href="https://github.com/pfmiles/kan-java" title="kan-java">kan-java项目</a></p>

<p>kan-java这个小工具，凡是用户在编码使用过程中能“碰”到的类和接口，全部都由java定义, 这确保用户拿到的东西都有精确的类型定义</p>

<p>凡是对上述接口的实现，都以groovy代码的形式存在</p>

<p>这贯彻了"接口静态类型，内部实现动态类型"的宗旨, 或者说“凡是要提供给另外一个人看、调用的地方(接口或接口类)，使用java，否则就用groovy”</p>

<p>当然了，单元测试也完全由groovy代码实现</p>

<p>将kan-java的jar包引入到项目中使用时，就跟使用其它任何纯java实现的jar包一样 —— 接口清晰，参数类型明确，返回类型明确, 你不会也没有必要知道开发人员在具体实现的时候，使用动态语言爽过一把</p>

<p>对于java和groovy的混编，项目的pom.xml如何配置，除了可以参考kan-java的配置外，还可以参考这个gist: <a href="https://gist.github.com/pfmiles/2f2ab77f06d48384f113">https://gist.github.com/pfmiles/2f2ab77f06d48384f113</a>, 里面举例了两种配置方式，各有特色</p>

<p>具体的效果，还需要真正地去实际项目中体会<br/>
另外，kan-java也是一个有趣的工具，这个工具所实现的功能我也是从未见到java世界内有其它地方讨论过的，它可以辅助java做“内部DSL”，有场景的可以一试</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安全的免登方案]]></title>
    <link href="http://pfmiles.github.io/blog/safe-sso-solution"/>
    <updated>2014-03-27T19:26:00+08:00</updated>
    <id>http://pfmiles.github.io/blog/safe-sso-solution</id>
    <content type="html"><![CDATA[<h2>免登</h2>

<ul>
<li>也就是用户在网站A已经登录，希望不必再重复登录过程，即可以登录状态访问网站B</li>
<li>这其实是一种“信任交换”，即用户已经取得了网站A的信任，希望以一种安全的方式也取得网站B的信任</li>
<li>从网站A免登到网站B的信任交换其实就是交换“登录cookie”, 很显然“交换登录cookie”只是“信任交换”的一种情形；从普遍意义上讲，用户在系统A和系统B之间做“信任交换”，其实可以交换任意“信任凭证”，他们的原理都是大同小异的</li>
</ul>


<!-- more -->


<h2>面临的问题及解决方案</h2>

<p>想要安全地做“信任交换”，以从网站A免登到网站B举例，其实主要是要解决如下几个问题：</p>

<ol>
<li>免登目标地址的合法性</li>
<li>在任何一次跳转的过程中防止参数被篡改</li>
<li>任何一次跳转链接都要具有短效性和一次性(除了最后一次跳往目标地址的跳转)</li>
<li>免登目标所接受的参数的合法性(如果有的话)</li>
<li>在任意一次跳转的前后相邻两次请求之间，保证客户端不被顶替(即请求间保证ip一致或设备指纹一致)</li>
</ol>


<p>第一个问题，“免登目标地址的合法性”，这是需要网站A解决的；建议网站A建立一个“合法的免登目标地址”列表，用以检测用户发起的免登请求的目标地址是否合法<br/>
需要注意的是，一个“合法”的免登目标地址，不仅仅是域名合法就行了，也包括path部份；因为不排除会有人将用户骗至一个执行重要操作的目标url进行免登，比如"www.B.com/resetPassword.do"，这是应当避免的<br/>
一般来讲，免登的目标地址应该是一个“无副作用”，无任何额外操作的类似于“主页”的地方，这样能杜绝上述情况发生</p>

<p>第二个问题，“在任何一次跳转的过程中防止参数被篡改”，这显然是必要的；从http跳转这种行为本身来讲，每一次跳转，服务器端都失去一次对该请求行为的控制，客户端想要更改跳转请求的任何属性都轻而易举<br/>
可以采用"数字签名"技术防止这种篡改；需要考虑的是，哪些数据需要被签名？这取决于该免登需求“在意”哪些数据被更改，一般来讲，都会对请求参数进行签名，当然其它数据，如path也可以被包含在内，如果path带有业务信息的话<br/>
由网站A负责加签，等请求经由客户端，在转发到网站B时，网站B会对请求进行验签; 这需要网站A和网站B事先约定好加签验签的密钥，一般来讲，对称的密钥串已经足够安全，只要密钥不被泄漏<br/>
另外，如果需要确保每次跳转后，访问服务器的仍是同一个客户端，那么这个签名步骤也可将客户端的ip地址或“设备指纹”等数据一并加签，以便验证请求在跳转过程中是否被劫持;不过这么做的风险是，并不仅仅只有被劫持的情况才会在跳转过程中改变客户端的ip，也可能是其它正常情况，比如A、B网站之间不同的网络架构造成的获取客户端ip地址误差等等，需三思而后行</p>

<p>第三个问题，“任何一次跳转链接都要具有短效性和一次性”，这也是显而易见的，否则客户端或搜索引擎只要将某个跳转中间阶段的url给收录下来，那么就随时可以免登了；有不少实力雄厚的大网站都出过这样的问题<br/>
这个问题可以通过“一次性令牌”方案简单解决，也就是说，跳转之前生成一个唯一的、一次性的、短期时效性的一个“令牌”，跳转到目标网站后在验证、作废该令牌<br/>
至于是网站A还是网站B负责生成这个令牌，其实无所谓，只要保证令牌的生成过程是私密的就行了：</p>

<ul>
<li>若网站A生成令牌，则直接将该令牌放入跳转请求中，客户端跳转到网站B后，由网站B调用网站A暴露的令牌验证接口(比如http形式的接口)验证并作废该令牌</li>
<li>若网站B生成令牌，则跳转前网站A调用网站B的服务请求该令牌(注意该请求过程必须私密，一般不走http接口，若要走也需要有保密手段)，跳转后由网站B验证并作废该令牌</li>
</ul>


<p>上述两种策略都可以，但看起来显然由跳转发起方来做令牌的生成和提供验证接口比较好，这样省去远程调用令牌生成接口的麻烦<br/>
注意，最后一次跳转，也就是跳转到最终目标页面的那次跳转，由于有登录验证，因此不需要一次性令牌验证了，但仍然需要签名验证(如果带有业务参数的话)</p>

<p>第四个问题，“免登目标所接受的参数的合法性”；一般来讲，免登目标url是不建议带有参数的，但如果一定要带，那么是必需要网站B验证这些参数的业务合法性，以免恶意用户从一开始就传送一些非法参数过来</p>

<p>第五个问题，在多次跳转请求间“保证客户端不被顶替”，这个听起来概念复杂，但实现起来挺简单：只要在加签、验签的时候把客户端ip也算在里面就行了，当然如果网站已经实现了“设备指纹”技术那就更好了，这个问题就转化为：“多次请求跳转期间，通过签名、验签保证客户端设备指纹不被篡改”</p>

<p>解决好了上述几个问题，也就是几次跳转，写好cookie，最终跳到目标页面上的事情了。</p>

<p>综上，一个典型的，由网站A免登到网站B，其跳转执行流程如下：<br/>
<img src="/images/sso_seq.png" alt="免登流程" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dropincc.java API design]]></title>
    <link href="http://pfmiles.github.io/blog/dropincc-dot-java-api-design"/>
    <updated>2012-03-18T16:29:00+08:00</updated>
    <id>http://pfmiles.github.io/blog/dropincc-dot-java-api-design</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/pfmiles/dropincc.java">dropincc.java</a>为了使得用户能够在java语言中直接定义新语言的词法、语法规则，API设计采用了串接与组合(cascading &amp; composition)风格的<a href="http://martinfowler.com/bliki/FluentInterface.html">FluentInterface</a>形式。</p>

<p>这种形式能够使得这一套API看起来更具有“业务语义”，而不需要像antlr等其它工具一样强迫用户去学习全新的另外一种含有业务语义的DSL。<br/>
新语言的词法、语法规则被用户直接在java语句里书写、执行，其实得到的是dropincc.java这个CC工具的内部概念的AST。这个AST其实与“让用户学习一套DSL，然后编写，然后编译这些DSL得到的AST”是一样的。<br/>
也就是说 —— dropincc.java里面很重要的一个理念就是：像书写字面量一样书写CC工具的AST(AST literal???)。</p>

<blockquote><p>注意：强调一下这里说的AST并非用户想要实现的新语言的AST，我指的是dropincc.java这个工具其内部表达词法、语法规则的内部形式。</p></blockquote>

<p>经过一些初步的尝试，我认为在java中定义出这样一套API是完全可行的，其中一些值得列出的、具有代表性的点如下：</p>

<!-- more -->


<ol>
<li>词法规则强制用户限定在正则文法的表达能力之内(即使用正则表达式，例子略)</li>
<li>上下文无关文法的表示主要是解决3种形式的表示：连接、选择、递归;

<ol>
<li>其中“连接”的表示, 若BNF为：<code>term ::= LEFTPAREN expr RIGHTPAREN</code>, 则右边的部分在java中表达为：<code>func(LEFTPAREN, expr, RIGHTPAREN)</code>;即：“以方法传参的自然按顺序排列表达‘连接’的意思”;而其中<code>expr</code>是一个non-terminal，也就是说这里要引用<code>expr</code>这个规则，这也就表达了“递归” —— 要递归地引用<code>expr</code>的话那么直接写在这里就好了；</li>
<li>“选择”的表示，即一个产生式有好几个alternative的情况，若BNF是<code>term ::= DIGIT multail | LEFTPAREN expr RIGHTPAREN | DIGIT;</code>, 则java中表达为：<code>func(DIGIT, mulTail).alt(LEFTPAREN, expr, RIGHTPAREN).alt(DIGIT);</code>。</li>
</ol>
</li>
<li>上述3种基本元素的表达具备之后，其实已经足够表达出复杂的语法了，不过为了“更好的体验”，为了用得更方便，我认为还应该加入“子rule语法糖”。即让使用者能够以“加括号”的方式在产生式中直接定义子规则，而不必每次都单独写成一个产生式，这种做法应该能很受欢迎，比如：

<ul>
<li>第一个产生式是：<code>MUL_DIV ::= MUL | DIV;</code></li>
<li>第二个产生式是：<code>mulTail ::= MUL_DIV term;</code></li>
<li>其实，若是有了前面说的语法糖，那么上述2个产生式就可以合并为：<code>mulTail ::= (MUL | DIV) term;</code>, 少了<code>MUL_DIV</code>这个没太多意义的产生式定义；</li>
<li>在java中表达为：<code>func(MUL.or(DIV), term)</code>; 若子规则中想表达的不是“选择”关系，而是“连接”关系的话，也就是<code>mulTail ::= (MUL DIV) term;</code>的话，在java中表达为：<code>func(MUL.and(DIV), term)</code>; 其中<code>and</code>这个方法就是表达“连接”关系，只不过加了括号，成为了一个子规则而已。</li>
</ul>
</li>
</ol>


<p>OK, dropincc.java的核心FluentInterface形式的API应该就这些了，我相信这是一种很自然的方式，用户需要掌握的东西很少。</p>

<h3>设计FluentInterface风格API过程中的经验总结</h3>

<p>对于这个接口设计，我的经验就是：</p>

<ol>
<li>传入参数尽量“泛化”、“统一接口化”;这个“统一接口”最好不要包含任何方法(也就是说只是一个标记接口)，否则会给FluentInterface带来一些令人困惑的方法选项(当用户敲入'.'操作符的时候将会在IDE工具的方法提示里多出很多不必要的方法)。</li>
<li>每个串接方法的返回结果可以随意“具体化”，因为这个返回结果的具体类名是不必展示给用户看的，所以你打算让用户下一步还能串接出什么样的方法，就尽管去返回一个具体的子类；但要注意返回结果不应该有太深的继承层次，否则“下一步串接”(当用户敲入'.'操作符的时候)将会在IDE工具里列出令人困惑的方法列表 —— 一般就一层继承关系 —— 继承自Object —— 一个接口实现 —— 就是1中所述的“泛化接口”，这样做方便你将返回值继续传入另一个方法中 —— 实现为所欲为的cascading &amp; composition...</li>
</ol>


<h3>以闭包的形式嵌入动作代码</h3>

<p>几乎所有的CC工具都提供一种“在match到特定的节点或树模式时允许执行一段用户自定义代码”的功能；这种自定义代码我把它叫做“动作代码”, “action”。无论是lex &amp; yacc或是antlr都是这样。<br/>
这个功能几乎是必须的，这提供了一种自由度相当高的形式让用户可以自定义AST节点，或是直接在parse的过程当中做一些自定义的计算，然后当整个parse结束时直接输出的就是整个的计算结果。<br/>
动作代码一般来讲，都是用该CC工具所要生成的程序所使用的语言来写的；比如lex要生成C代码，他们的动作代码就是C来写的；antlr要生成java代码，那么它的动作代码自然就是java写的（当然antlr也能生成其它语言代码，相对应的，就使用那种语言来编写动作代码）。
dropincc.java既然设计目标是要嵌入到java语言中去使用，自然就是要用java语言来写动作代码了；<br/>
但是，跟lex &amp; yacc或者antlr不同的是，我并不打算让用户写一些残缺不全的动作代码放在某个约定的位置然后在生成目标程序的过程中将它们“编织”到目标程序中，这样的话就跟传统的CC工具没有任何区别了，没有什么实质上的改进；<br/>
既然dropincc.java是“嵌入”到普通的java应用程序代码中间工作的，那么它完全有理由使用“闭包(closure)”的形式来组织“动作代码”！为什么用“闭包”？因为dropincc.java是“嵌入”到业务代码中使用的，用闭包来写动作代码可以capture一些业务代码上下文信息，这对构建DSL来讲是非常大的便利！<br/>
比如，你的业务代码上下文里面有个<code>OrderService</code>对象，它负责一些"订单"业务逻辑，而当你编写一个闭包作为动作代码的时候，你完全可以"capture"上下文中的这个<code>OrderService</code>对象，从而使得你创造的语言在执行逻辑上与订单业务紧密、无缝地结合 —— 这是一种非常平滑的构建DSL的方式。</p>

<h3>最终的样子</h3>

<blockquote><p>注：此段代码只代表示意的风格、API情况，虽然能编译通过、运行，但不一定是行为完全正确四则运算表达式计算器</p></blockquote>

<pre><code>// 3.define lexical rules
Lang calculator = new Lang();
Token DIGIT = calculator.addToken("\\d+");
Token ADD = calculator.addToken("\\+");
Token SUB = calculator.addToken("\\-");
Token MUL = calculator.addToken("\\*");
Token DIV = calculator.addToken("/");
Token LEFTPAREN = calculator.addToken("\\(");
Token RIGHTPAREN = calculator.addToken("\\)");
// 2.define grammar rules and corresponding actions
Grule expr = new Grule();
Grule term = new Grule();
Element mulTail = calculator.addGrammarRule(MUL.or(DIV), term).action(
        new Action() {
            public Object act(Object... params) {
                return params;
            }
        });
term.fillGrammarRule(DIGIT, mulTail).action(new Action() {
    public Object act(Object... params) {
        int factor = Integer.parseInt((String) params[0]);
        Object[] mulTailReturn = (Object[]) params[1];
        String op = (String) mulTailReturn[0];
        int factor2 = (Integer) mulTailReturn[1];
        if ("*".equals(op)) {
            return factor * factor2;
        } else if ("/".equals(op)) {
            return factor / factor2;
        } else {
            throw new RuntimeException("Unsupported operator: " + op);
        }
    }
}).alt(LEFTPAREN, expr, RIGHTPAREN).action(new Action() {
    public Object act(Object... params) {
        return params[1];
    }
}).alt(DIGIT).action(new Action() {
    public Object act(Object... params) {
        return Integer.parseInt((String) params[0]);
    }
});
Element addendTail = calculator.addGrammarRule(ADD.or(SUB), term)
        .action(new Action() {
            public Object act(Object... params) {
                return params;
            }
        });
expr.fillGrammarRule(term, addendTail, CC.EOF).action(new Action() {
    public Object act(Object... params) {
        int addend = (Integer) params[0];
        Object[] addendTailReturn = (Object[]) params[1];
        String op = (String) addendTailReturn[0];
        int addend2 = (Integer) addendTailReturn[1];
        if ("+".equals(op)) {
            return addend + addend2;
        } else if ("-".equals(op)) {
            return addend - addend2;
        } else {
            throw new RuntimeException("Unsupported operator: " + op);
        }
    }
});
// 1.compile it!
calculator.compile();
// 0.FIRE!!!
System.out.println(calculator.exe("1+2+3+(4+5*6*7*(64/8/2/(2/1)/1)*8+9)+10"));
</code></pre>

<p>上面约60行java代码实现了一个相当复杂的多项式计算器语言：支持加减乘除四则运算以及括号调整优先级。而以往我们使用antlr来实现这个功能的话，最终生成、放到项目中工作的java代码会以千行计。</p>

<ul>
<li>这段代码是能够完全嵌入到任何普通的java业务系统程序代码当中的，是完全语法合格、能编译通过的，这是与传统CC工具的“代码残片”表示的动作代码所不同的地方</li>
<li>其中用到了上面介绍的“以正则语言来定义词法规则”、“以FluentInterfaces来定义语法规则”，以及“以闭包的形式来书写动作代码”（java中的闭包以“匿名内部类”的形式表示，道理一样）</li>
<li>其中，动作代码是一段段由<code>Action</code>接口实现的闭包（匿名内部类），里面的代码显然可以随意引用当前上下文中的所有变量、对象，这样实现了对上下文的capture，跟业务系统的无缝结合。</li>
<li><code>Action</code>闭包带有一个方法，参数是<code>Object... params</code>，这个参数里的值以位置顺序的方式对应于该action代码所附着的产生式里面的语法元素在parsing的时候所match到的值，听起来比较绕口，但实际上很简单，比如上面的 :</li>
</ul>


<p>带括号的表达式的action:</p>

<pre><code>.alt(LEFTPAREN, expr, RIGHTPAREN).action(new Action() {
    public Object act(Object... params) {
        return params[1];
    }
</code></pre>

<p>它的<code>params</code>的长度为3，分别是<code>["(", expr子规则匹配所返回的值, ")"]</code>，而这里我们的“业务(四则运算)”只需要关心<code>expr</code>的返回值，所以动作代码直接将<code>params[1]</code>（expr的返回值）返回给上一级匹配。<br/>
就是这样，实际上你可以在动作代码里面做任何事情，只要符合java语法的、你能想到的。</p>

<p>第一个版本的API设计基本就是这样了，往后可能还会加入一些语法糖，比如“Kleen闭包”来进一步方便语法规则的定义，不过会很慎重，因为dropincc.java是以小巧、易用为设计目标的，语法糖太多很可能会帮倒忙。</p>
]]></content>
  </entry>
  
</feed>
