<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: interview | Meta-Interpretation]]></title>
  <link href="http://pfmiles.github.com/blog/category/interview/atom.xml" rel="self"/>
  <link href="http://pfmiles.github.com/"/>
  <updated>2013-08-29T19:05:32+08:00</updated>
  <id>http://pfmiles.github.com/</id>
  <author>
    <name><![CDATA[pf_miles]]></name>
    <email><![CDATA[miles.wy.1@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[面试中的算法]编程判断两个链表是否相交]]></title>
    <link href="http://pfmiles.github.com/blog/algorithms-in-job-interview-test-if-two-linked-lists-intersected"/>
    <updated>2012-03-06T23:30:00+08:00</updated>
    <id>http://pfmiles.github.com/blog/algorithms-in-job-interview-test-if-two-linked-lists-intersected</id>
    <content type="html"><![CDATA[<p>这是一道广为流传的题目: <a href="http://bop1.wikispaces.com/%E7%AC%AC%E4%B8%89%E7%AB%A0+%E7%BB%93%E6%9E%84%E4%B9%8B%E6%B3%95#x-%E7%AC%AC3%E7%AB%A0%20%E7%BB%93%E6%9E%84%E4%B9%8B%E6%B3%95%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8A%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8E%A2%E7%B4%A2-3.6%E7%BC%96%E7%A8%8B%E5%88%A4%E6%96%AD%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E7%9B%B8%E4%BA%A4">编程判断两个链表是否相交</a>;原题假设“不带环”，所以只要想通了之后很简单；但是，若要考虑带环的情况，那么要注意的点就很多了。
其实可以把无环和有环的情况全都包括在一个方法实现内解决。</p>

<h3>分析</h3>

<p>首先，无环的情况；无环是《编程之美》原书里的题目，很多人都反应说这个题相对书中其它题来讲太过于简单了。也确实，只要在纸上把“所有单向链表相交的情况”画出来很容易就能想通解法了（只要正确理解题意，那么“两个无环单向链表”画出来只可能是2条不相干的链表或一个"Y"字形） —— 所以，判断两个不带环的链表是否相交，只要将两个链表的头指针都移到链表尾，然后比较尾指针地址是否相等就可以了。
如果带环，个人总结，要明白以下几点：</p>

<ol>
<li>无环链表和有环链表是不可能相交的;</li>
<li>两个有环链表若相交，其“整个环上”的所有node一定都重合;</li>
<li>有环链表的相交，情况只有2种：相交于"环上"或相交于"不是环的部分",即下图所示;两种情况都需要使用“两个指针的追逐”方法来判断两个链表的环部分是否相交;
<img src="/images/circledLinkedListsIntersections.png" title="带环单向链表相交只有2种情况" alt="带环单向链表相交只有2种情况" /></li>
<li>有关链表追逐的考虑: 相对速度、距离、时间要算好，否则很容易漏掉几种边界情况;</li>
</ol>


<!-- more -->


<h3>代码</h3>

<pre><code>#include &lt;stdio.h&gt;

// define the node struct of links
typedef struct Node {
    struct Node* next;
} Node;

int is_intersected(Node* p1, Node* p2);

Node* has_circle(Node* head);

int main(int args, char** argv) {
    Node end1 = { NULL };
    Node end2 = { NULL };
    // 定义几种链表情况
    // two links not intersect with each other, no circle
    Node link_1_n =
            {
                    &amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;end1}}}}}}}}};
    Node link_2_n =
            {
                    &amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;end2}}}}}}}}};

    // two links intersect with each other, no circle
    Node common_n = { &amp;(Node) {&amp;(Node) {&amp;end1}}};

    Node link_1_y = { &amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;common_n}}}}}};
    Node link_2_y = { &amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;common_n}}}}}};

    // two links, has circle, not intersected.
    Node circle1 = { &amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;circle1}}}}};
    Node link_c1_n = { &amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;circle1}}}}};

    Node circle2 = { &amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;circle2}}}}};
    Node link_c2_n = { &amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;circle2}}}}};

    // two links, has circle, intersected at a non-circle position
    Node common_c = { &amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;common_c}}}}};
    Node common_part = { &amp;(Node) {&amp;common_c}};

    Node link_c1_y = { &amp;(Node) {&amp;(Node) {&amp;common_part}}};
    Node link_c2_y = { &amp;(Node) {&amp;(Node) {&amp;common_part}}};
    // two links, has common circle, but different 'joint-points'.

    Node jp1 = { NULL };
    Node jp2 = { NULL };
    // 'weave' the joint-points into a circle:
    jp1.next = &amp;(Node) {&amp;(Node) {&amp;jp2}};
    jp2.next = &amp;(Node) {&amp;jp1};

    Node link_c1_y2 = { &amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;jp1}}}}};
    Node link_c2_y2 = { &amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;(Node) {&amp;jp2}}}}};

    if (is_intersected(&amp;link_1_n, &amp;link_2_n)) {
        printf("link_1_n and link_2_n Intersected!\n");
    }

    if (is_intersected(&amp;link_1_y, &amp;link_2_y)) {
        printf("link_1_y and link_2_y Intersected!\n");
    }

    if (is_intersected(&amp;link_c1_n, &amp;link_c2_n)) {
        printf("link_c1_n and link_c2_n Intersected!\n");
    }

    if (is_intersected(&amp;link_c1_y, &amp;link_c2_y)) {
        printf("link_c1_y and link_c2_y Intersected!\n");
    }

    if (is_intersected(&amp;link_c1_y2, &amp;link_c2_y2)) {
        printf("link_c1_y2 and link_c2_y2 Intersected!\n");
    }
    return 0;
}

int is_intersected(Node* p1, Node* p2) {
    Node* has_circle_1 = has_circle(p1);
    Node* has_circle_2 = has_circle(p2);

    if (has_circle_1) {
        if (has_circle_2) {
            Node* pp1 = has_circle_1;
            Node* pp2 = has_circle_2;
            if (pp1 == pp2 || pp1-&gt;next == pp2)
                return 1;
            while (pp1-&gt;next != has_circle_1) {
                pp1 = pp1-&gt;next;
                pp2 = pp2-&gt;next-&gt;next;
                if (pp1 == pp2)
                    return 1;
            }
            return 0;
        } else {
            return 0;
        }
    } else {
        if (has_circle_2) {
            return 0;
        } else {
            while (p1-&gt;next)
                p1 = p1-&gt;next;
            while (p2-&gt;next)
                p2 = p2-&gt;next;
            return p1 == p2;
        }
    }
    return 0;
}

Node* has_circle(Node* head) {
    Node* p1;
    Node* p2;
    p1 = p2 = head;
    if (p2-&gt;next != NULL) {
        p2 = p2-&gt;next;
    } else {
        return NULL;
    }
    while (p2-&gt;next != NULL &amp;&amp; p2-&gt;next-&gt;next != NULL) {
        p1 = p1-&gt;next;
        p2 = p2-&gt;next-&gt;next;
        if (p1 == p2)
            return p1;
    }
    return NULL;
}
</code></pre>

<p>其中，<code>has_circle</code>方法是判断一个单向链表是否带环的，基本原理就是设置2个“速度”不同的链表，快的去追慢的，追上就是带环，直到较快指针遇到null还没追上就是没有环；假设环包含n个节点，指针<code>p2</code>的"速度"是2，<code>p1</code>的速度是1，相对速度就是1，从相同一点出发的话，<code>p2</code>追上<code>p1</code>至少要n步；若再假设该链表除了环的部分外还带有一个长度为k的“尾巴”，那么追上的步数最多是n+k;也就是线性时间复杂度内就能完成这个判断。</p>

<p>这提供了一种很好的判断是否"环状"的思路；以前我只写过“用一个栈来记录”的方式，弱爆了...(时间复杂度为O(n<sup>2</sup>))</p>

<p>在<code>has_circle_1</code>和<code>has_circle_2</code>都满足的时候，也就是说2个链表都带环的时候，要分别取2个环上的一点来玩“追逐游戏”来判断是否相交；在这段程序里是<code>pp1</code>和<code>pp2</code>;然后一个速度为2一个速度为1开始玩“追逐游戏”，当慢的那个走完环上所有节点时快的那个还没追上它的话，说明不相交(此时耗费时间n——即环节点数;因为快慢指针的相对速度为1，快指针理应在时间n以内追上慢链表，否则不相交)。</p>

<h3>总结</h3>

<p>单向链表的问题...着实不简单，可以相当复杂...对于这种关乎“形状”的问题，在纸上画一画会很有帮助。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[面试中的算法]求子数组的最大和]]></title>
    <link href="http://pfmiles.github.com/blog/algorithms-in-job-interview-max-sum-sub-list"/>
    <updated>2012-02-28T22:48:00+08:00</updated>
    <id>http://pfmiles.github.com/blog/algorithms-in-job-interview-max-sum-sub-list</id>
    <content type="html"><![CDATA[<p>此问题由<a href="http://blog.csdn.net/v_JULY_v/article/details/6050133">v_JULY_v</a>整理发布并发表于<a href="http://blog.csdn.net/v_JULY_v">blog</a>上, 版权归原作者所有。</p>

<p><strong>输入一个整形数组,数组里有正数也有负数。
数组中连续的一个或多个整数组成一个子数组,每个子数组都有一个和。
求所有子数组的和的最大值。要求时间复杂度为 O(n)。
例如输入的数组为 1, -2, 3, 10, -4, 7, 2, -5,和最大的子数组为 3, 10, -4, 7, 2, 因此输出为该子数组的和 18</strong></p>

<h3>分析：</h3>

<p>贪心算法能在此问题的任意一个子问题上找到最优解(最优子结构)，所以可以用贪心算法解决。</p>

<!-- more -->


<h3>程序：</h3>

<pre><code># 1, -2, 3, 10, -4, 7, 2, -5, output the maximum summarized sub-list
# greedy algorithm
def greatestSumSubList(al):
    mx = 0
    sm = 0
    for i in al:
    sm += i
    if sm &lt; 0:
        sm = 0
    if sm &gt; mx:
        mx = sm
    return mx

print greatestSumSubList([1, -2, 3, 10, -4, 7, 2, -5])
</code></pre>

<p>输出： 18</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[面试中的算法]设计包含min函数的栈]]></title>
    <link href="http://pfmiles.github.com/blog/algorithms-in-job-interview-design-a-stack-with-min-function"/>
    <updated>2012-02-28T00:14:00+08:00</updated>
    <id>http://pfmiles.github.com/blog/algorithms-in-job-interview-design-a-stack-with-min-function</id>
    <content type="html"><![CDATA[<p>此问题由<a href="http://blog.csdn.net/v_JULY_v/article/details/6050133">v_JULY_v</a>整理发布并发表于<a href="http://blog.csdn.net/v_JULY_v">blog</a>上, 版权归原作者所有。</p>

<p><strong>问题描述：定义栈的数据结构,要求添加一个 min 函数,能够得到栈的最小元素, 要求函数 min、push 以及 pop 的时间复杂度都是 O(1)</strong></p>

<h3>分析：</h3>

<p>主要是抓住栈的<strong>“还原现场”</strong>的能力 —— 由于随着元素的加入与弹出，“最小元素”随时可能变化；在栈的每一个状态，都要维护一个当前最小元素的记录;随着push或pop，“最小元素”也跟着更新或还原到上一次的状态；所以，“最小元素”应该随着栈元素被记录在栈的每一层。</p>

<!--more-->


<h3>程序：</h3>

<pre><code>class MinStack(object):
    def __init__(self):
    self.arr = []

    def push(self, ele):
    if len(self.arr) == 0:
        # no elements yet
        self.arr.append((ele, ele));# pushes (ele, minEle)
    else:
        self.arr.append((ele, ele if ele &lt; self.arr[-1][1] else self.arr[-1][1]))

    def pop(self):
    return self.arr.pop()[0]

    # using name 'myMin' instead of 'min' because 'min' is a built-in method
    def myMin(self):
    return self.arr[-1][1]

stack = MinStack()
stack.push(5)
print stack.myMin() # 5 expected
stack.push(-1)
stack.push(10)
stack.push(9)

print stack.myMin() # -1 expected
print stack.pop() # 9 expected
</code></pre>

<p>要点：利用栈的“还原上一次记录”的能力, 随时维护当前最小元素</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[面试中的算法]把二元查找树转变成排序的双向链表]]></title>
    <link href="http://pfmiles.github.com/blog/algorithms-in-job-interview-turn-binary-search-tree-to-doubly-linked-list"/>
    <updated>2012-02-27T23:26:00+08:00</updated>
    <id>http://pfmiles.github.com/blog/algorithms-in-job-interview-turn-binary-search-tree-to-doubly-linked-list</id>
    <content type="html"><![CDATA[<p>此问题由<a href="http://blog.csdn.net/v_JULY_v/article/details/6050133">v_JULY_v</a>整理发布并发表于<a href="http://blog.csdn.net/v_JULY_v">blog</a>上, 版权归原作者所有。</p>

<p><strong>问题描述：输入一棵二元查找树,将该二元查找树转换成一个排序的双向链表。要求不能创建任何新的结点,只调整指针的指向</strong></p>

<p>比如二叉搜索树：</p>

<pre><code>       10
      /   \
    4      12
   / \    /  \
  3   5 11    13
</code></pre>

<p>输出应为： 3, 4, 5, 10, 11, 12, 13</p>

<h3>分析：</h3>

<p>处理树状结构很容易想到递归，而二叉搜索树其实恰好是已经排序好的一个结构，而要把它变成数组，只需“中序遍历”即可: 3,4,5,10,11,12,13</p>

<!--more-->


<h3>程序：</h3>

<pre><code># define the data-structure first
class Node(object):
    def __init__(self, left=None, value=None, right=None):
        self.value = value
        self.left = left
        self.right = right

# construct the bin-search tree 
root = Node(None, 10, None)

left = Node(Node(None, 3, None), 4, Node(None, 5, None))

right = Node(Node(None, 11, None), 12, Node(None, 13, None))

root.left = left
root.right = right

def show(node):
    rst = [node.value]
    leftCur, rightCur = node, node
    while leftCur.left != None:
        rst.insert(0, leftCur.left.value)
        leftCur = leftCur.left
    while rightCur.right != None:
        rst.append(rightCur.right.value)
        rightCur = rightCur.right
    print rst

# 3,4,5,10,11,12,13 expected

# the recursive mid-order traverse function
def traverse(node, leftOrRight = None):
    l, r = None, None
    if node.left != None:
        l = traverse(node.left, "left")
        node.left = l
        l.right = node
    if node.right != None:
        r = traverse(node.right, "right")
        node.right = r
        r.left = node
    if leftOrRight == "left" and r != None:
        return r
    elif leftOrRight == "right" and l != None:
        return l
    else:
        return node

n = traverse(root)

show(n)
</code></pre>

<p>结果输出： [3, 4, 5, 10, 11, 12, 13]</p>

<p>要点除了搞清楚二叉搜索树的特性以及中序遍历的规律外，要注意traverse方法中对于该返回'l' 还是 'r' 或者是node的判断</p>
]]></content>
  </entry>
  
</feed>
