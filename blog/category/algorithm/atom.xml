<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: algorithm | Meta-Interpretation]]></title>
  <link href="http://pfmiles.github.com/blog/category/algorithm/atom.xml" rel="self"/>
  <link href="http://pfmiles.github.com/"/>
  <updated>2012-03-05T09:49:32+08:00</updated>
  <id>http://pfmiles.github.com/</id>
  <author>
    <name><![CDATA[pf_miles]]></name>
    <email><![CDATA[miles.wy.1@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[编程之美]寻找最大的k个数]]></title>
    <link href="http://pfmiles.github.com/blog/find-the-max-k-numbers"/>
    <updated>2012-03-02T13:37:00+08:00</updated>
    <id>http://pfmiles.github.com/blog/find-the-max-k-numbers</id>
    <content type="html"><![CDATA[<p>《编程之美》上的一道题： <a href="http://bop1.wikispaces.com/%E7%AC%AC%E4%BA%8C%E7%AB%A0+%E6%95%B0%E5%AD%97%E4%B9%8B%E9%AD%85#x-2.5%20%E5%AF%BB%E6%89%BE%E6%9C%80%E5%A4%A7%E7%9A%84K%E4%B8%AA%E6%95%B0%20%E2%98%85%E2%98%85%E2%98%85">wiki链接</a>;
其实在<a href="http://blog.csdn.net/v_JULY_v/article/details/6370650">July的文章里有更加深刻的分析</a>，我这里只是用最小堆的方式实现一遍，体会和总结一下。</p>

<h3>分析</h3>

<ul>
<li>这个问题，只要找到“最大的K个数”，但并不要求这K个数之间排序；</li>
<li>而且如果K很小的话，完全可以采用选择排序的方式，达到O(nk)的复杂度；</li>
<li>若K不小，则可利用这“只能容纳K个数的最小堆”的方法来做；时间复杂度是O(nlogk);用“堆”这种结构来解决此问题，很好地理解和利用了堆的特性:

<ol>
<li>找最大的K个数要使用最小堆，是因为最小堆总能最方便地剔除“最小的元素”，那么最后剩在堆中的都是最大的K个元素了；反之，若要找“最小的K个元素”则应该使用最大堆</li>
<li>二叉堆的同层节点之间是没有顺序的，这恰好符合我们的题目“不要求K个数之间排序”的需求，少了K个数之间的排序则能够减少不必要计算</li>
</ol>
</li>
</ul>


<h3>程序</h3>

<pre><code>#include &lt;stdio.h&gt;

// defines the heap structure
typedef struct {
    int size, last_pos;
    int* data;
} Heap;

void into_min_heap(int node, Heap* heap);
void adjust_min_heap(Heap* heap, int cur_index);

// find the max k digits
void max_k(int len, int array[], int k, int rst[]) {
    // build min-heap on rst while iterating array:
    // worst time complexity: n * log k
    int i;
    Heap heap = { k, -1, rst };
    for (i = 0; i &lt; len; i++) {
        into_min_heap(array[i], &amp;heap);
    }
}

void into_min_heap(int node, Heap* heap) {
    if (heap-&gt;last_pos == -1) {
        heap-&gt;data[0] = node;
        heap-&gt;last_pos = 0;
    } else {
        if (node &lt; heap-&gt;data[0]) {
            return;
        } else {
            if (heap-&gt;last_pos + 1 &lt; heap-&gt;size) {
                heap-&gt;data[heap-&gt;last_pos + 1] = node;
                heap-&gt;last_pos++;
            } else {
                heap-&gt;data[0] = node;
                adjust_min_heap(heap, 0); // log k
            }
        }
    }
}

void adjust_min_heap(Heap* heap, int cur_index) {
    int c1_index = (cur_index + 1) * 2;
    int c2_index = (cur_index + 1) * 2 + 1;
    if (c1_index &lt; heap-&gt;size) {
        if (heap-&gt;data[cur_index] &lt;= heap-&gt;data[c1_index]) {
            if (c2_index &lt; heap-&gt;size) {
                if (heap-&gt;data[cur_index] &lt;= heap-&gt;data[c2_index]) {
                    return;
                } else {
                    int tmp = heap-&gt;data[cur_index];
                    heap-&gt;data[cur_index] = heap-&gt;data[c2_index];
                    heap-&gt;data[c2_index] = tmp;
                    adjust_min_heap(heap, c2_index);
                }
            }
        } else {
            int tmp = heap-&gt;data[cur_index];
            heap-&gt;data[cur_index] = heap-&gt;data[c1_index];
            heap-&gt;data[c1_index] = tmp;
            adjust_min_heap(heap, c1_index);
        }
    }
}

int main(int args, char** argv) {
    int k = 3;
    int rst[k];
    int arr[10] = { 1, 20, -35, 4, 7, 11, 19, -5, 0, 18 };
    max_k(10, arr, k, rst);
    printf("The max k numbers are: ");
    int i;
    for (i = 0; i &lt; k; i++) {
        printf("%d ", rst[i]);
    }
    return 0;
}
</code></pre>

<h3>总结</h3>

<p>还是要理解各种常用数据结构的特性及其意义，遇到特定的问题时才好能够正确地选择出最能适合需求的这种结构。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[跟踪递归函数路径的方法]]></title>
    <link href="http://pfmiles.github.com/blog/trace-the-path-of-recursive-function"/>
    <updated>2012-02-29T00:04:00+08:00</updated>
    <id>http://pfmiles.github.com/blog/trace-the-path-of-recursive-function</id>
    <content type="html"><![CDATA[<p>有些时候，需要追踪递归函数的路径；比如：递归地遍历一棵树，当找到符合要求的节点时，打印出从根节点到此节点的路径。</p>

<p>这种时候，若子节点不持有到父节点的指针，则需要对路径进行随时地记录，以便需要时能够获取；</p>

<ul>
<li>一种方式就是建立“栈”结构，在每次递归时将当前节点压栈，并且记得在递归调用过后立刻<strong><em>出栈</em></strong>；</li>
<li>另一种方式就是直接利用函数递归调用的“调用栈”(也就是传参)了。</li>
</ul>


<p><em>例如有一个题目：输入一个整数和一棵二元树。
从树的根结点开始往下访问一直到叶结点所经过的所有结点形成一条路径。
打印出和与输入整数相等的所有路径。</em></p>

<p>程序较简单，就是递归遍历，查找节点相加数值等于预期数值的情况：</p>

<pre><code># define the data-structure first
class Node(object):
    def __init__(self, left=None, value=None, right=None):
    self.value = value
    self.left = left
    self.right = right

root = Node(Node(Node(None, 4, None), 5, None), 10 , Node(None, 12, Node(None, 7, None)))

found = []
def findPath(tree, value, sm=0, paths=[]):
    if tree.value + sm &gt; value:
    return
    elif tree.value + sm == value:
    paths.append(tree.value)
    found.append(paths[:])
    return
    else:
    paths.append(tree.value)
    if tree.left != None:
        findPath(tree.left, value, tree.value + sm, paths)
    if tree.right !=None:
        findPath(tree.right, value, tree.value + sm, paths)
    paths.pop()

findPath(root, 22)
print found
</code></pre>

<p>其中值得注意的是：</p>

<pre><code>paths.append(tree.value)
</code></pre>

<p>和：</p>

<pre><code>paths.pop()
</code></pre>

<p>这两行；
在递归方法前后进行对应地push和pop是正确记录路径必不可少的步骤。</p>

<p>其实，像上述这种每次递归调用之前都push，每次调用之后都pop的情况，其栈的层次、深度、变化规律跟函数调用栈是完全一致的，那么其实就完全可以考虑直接把父节点扔给下一层递归函数：</p>

<pre><code>findPath(tree.left, value, tree.value + sm, tree)
</code></pre>

<p>其实，findPath的函数签名现在就变成了：</p>

<pre><code>findPath(树, 预期值, 当前和, 父节点)
</code></pre>

<p>这样一来，其实路径上的每一步，都是记录在调用栈上的(就算子节点没有父节点的指针，函数参数也直接把父节点带过来了，也就是在调用栈中)，当程序想要输出路径时，也完全能够将路径还原。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[面试中的算法]求子数组的最大和]]></title>
    <link href="http://pfmiles.github.com/blog/algorithms-in-job-interview-max-sum-sub-list"/>
    <updated>2012-02-28T22:48:00+08:00</updated>
    <id>http://pfmiles.github.com/blog/algorithms-in-job-interview-max-sum-sub-list</id>
    <content type="html"><![CDATA[<p>此问题由<a href="http://blog.csdn.net/v_JULY_v/article/details/6050133">v_JULY_v</a>整理发布并发表于<a href="http://blog.csdn.net/v_JULY_v">blog</a>上, 版权归原作者所有。</p>

<p><strong>输入一个整形数组,数组里有正数也有负数。
数组中连续的一个或多个整数组成一个子数组,每个子数组都有一个和。
求所有子数组的和的最大值。要求时间复杂度为 O(n)。
例如输入的数组为 1, -2, 3, 10, -4, 7, 2, -5,和最大的子数组为 3, 10, -4, 7, 2, 因此输出为该子数组的和 18</strong></p>

<h3>分析：</h3>

<p>贪心算法能在此问题的任意一个子问题上找到最优解(最优子结构)，所以可以用贪心算法解决。</p>

<!-- more -->


<h3>程序：</h3>

<pre><code># 1, -2, 3, 10, -4, 7, 2, -5, output the maximum summarized sub-list
# greedy algorithm
def greatestSumSubList(al):
    mx = 0
    sm = 0
    for i in al:
    sm += i
    if sm &lt; 0:
        sm = 0
    if sm &gt; mx:
        mx = sm
    return mx

print greatestSumSubList([1, -2, 3, 10, -4, 7, 2, -5])
</code></pre>

<p>输出： 18</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[面试中的算法]设计包含min函数的栈]]></title>
    <link href="http://pfmiles.github.com/blog/algorithms-in-job-interview-design-a-stack-with-min-function"/>
    <updated>2012-02-28T00:14:00+08:00</updated>
    <id>http://pfmiles.github.com/blog/algorithms-in-job-interview-design-a-stack-with-min-function</id>
    <content type="html"><![CDATA[<p>此问题由<a href="http://blog.csdn.net/v_JULY_v/article/details/6050133">v_JULY_v</a>整理发布并发表于<a href="http://blog.csdn.net/v_JULY_v">blog</a>上, 版权归原作者所有。</p>

<p><strong>问题描述：定义栈的数据结构,要求添加一个 min 函数,能够得到栈的最小元素, 要求函数 min、push 以及 pop 的时间复杂度都是 O(1)</strong></p>

<h3>分析：</h3>

<p>主要是抓住栈的<strong>“还原现场”</strong>的能力 —— 由于随着元素的加入与弹出，“最小元素”随时可能变化；在栈的每一个状态，都要维护一个当前最小元素的记录;随着push或pop，“最小元素”也跟着更新或还原到上一次的状态；所以，“最小元素”应该随着栈元素被记录在栈的每一层。</p>

<!--more-->


<h3>程序：</h3>

<pre><code>class MinStack(object):
    def __init__(self):
    self.arr = []

    def push(self, ele):
    if len(self.arr) == 0:
        # no elements yet
        self.arr.append((ele, ele));# pushes (ele, minEle)
    else:
        self.arr.append((ele, ele if ele &lt; self.arr[-1][1] else self.arr[-1][1]))

    def pop(self):
    return self.arr.pop()[0]

    # using name 'myMin' instead of 'min' because 'min' is a built-in method
    def myMin(self):
    return self.arr[-1][1]

stack = MinStack()
stack.push(5)
print stack.myMin() # 5 expected
stack.push(-1)
stack.push(10)
stack.push(9)

print stack.myMin() # -1 expected
print stack.pop() # 9 expected
</code></pre>

<p>要点：利用栈的“还原上一次记录”的能力, 随时维护当前最小元素</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[面试中的算法]把二元查找树转变成排序的双向链表]]></title>
    <link href="http://pfmiles.github.com/blog/algorithms-in-job-interview-turn-binary-search-tree-to-doubly-linked-list"/>
    <updated>2012-02-27T23:26:00+08:00</updated>
    <id>http://pfmiles.github.com/blog/algorithms-in-job-interview-turn-binary-search-tree-to-doubly-linked-list</id>
    <content type="html"><![CDATA[<p>此问题由<a href="http://blog.csdn.net/v_JULY_v/article/details/6050133">v_JULY_v</a>整理发布并发表于<a href="http://blog.csdn.net/v_JULY_v">blog</a>上, 版权归原作者所有。</p>

<p><strong>问题描述：输入一棵二元查找树,将该二元查找树转换成一个排序的双向链表。要求不能创建任何新的结点,只调整指针的指向</strong></p>

<p>比如二叉搜索树：</p>

<pre><code>       10
      /   \
    4      12
   / \    /  \
  3   5 11    13
</code></pre>

<p>输出应为： 3, 4, 5, 10, 11, 12, 13</p>

<h3>分析：</h3>

<p>处理树状结构很容易想到递归，而二叉搜索树其实恰好是已经排序好的一个结构，而要把它变成数组，只需“中序遍历”即可: 3,4,5,10,11,12,13</p>

<!--more-->


<h3>程序：</h3>

<pre><code># define the data-structure first
class Node(object):
    def __init__(self, left=None, value=None, right=None):
        self.value = value
        self.left = left
        self.right = right

# construct the bin-search tree 
root = Node(None, 10, None)

left = Node(Node(None, 3, None), 4, Node(None, 5, None))

right = Node(Node(None, 11, None), 12, Node(None, 13, None))

root.left = left
root.right = right

def show(node):
    rst = [node.value]
    leftCur, rightCur = node, node
    while leftCur.left != None:
        rst.insert(0, leftCur.left.value)
        leftCur = leftCur.left
    while rightCur.right != None:
        rst.append(rightCur.right.value)
        rightCur = rightCur.right
    print rst

# 3,4,5,10,11,12,13 expected

# the recursive mid-order traverse function
def traverse(node, leftOrRight = None):
    l, r = None, None
    if node.left != None:
        l = traverse(node.left, "left")
        node.left = l
        l.right = node
    if node.right != None:
        r = traverse(node.right, "right")
        node.right = r
        r.left = node
    if leftOrRight == "left" and r != None:
        return r
    elif leftOrRight == "right" and l != None:
        return l
    else:
        return node

n = traverse(root)

show(n)
</code></pre>

<p>结果输出： [3, 4, 5, 10, 11, 12, 13]</p>

<p>要点除了搞清楚二叉搜索树的特性以及中序遍历的规律外，要注意traverse方法中对于该返回'l' 还是 'r' 或者是node的判断</p>
]]></content>
  </entry>
  
</feed>
