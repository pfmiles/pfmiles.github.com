<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: algo-class | Meta-Interpretation]]></title>
  <link href="http://pfmiles.github.io/blog/category/algo-class/atom.xml" rel="self"/>
  <link href="http://pfmiles.github.io/"/>
  <updated>2014-04-16T22:17:00+08:00</updated>
  <id>http://pfmiles.github.io/</id>
  <author>
    <name><![CDATA[pf_miles]]></name>
    <email><![CDATA[miles.wy.1@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Algo-class第二周小记: Master Method]]></title>
    <link href="http://pfmiles.github.io/blog/algo-class-week2-notes-master-method"/>
    <updated>2012-04-03T11:40:00+08:00</updated>
    <id>http://pfmiles.github.io/blog/algo-class-week2-notes-master-method</id>
    <content type="html"><![CDATA[<p>week2主要讲了master method，感觉从来没有听过如此清晰有条理的介绍master method的讲解，不得不佩服<a href="http://theory.stanford.edu/~tim/">Tim Roughgarden</a>教授的功力。<br/>
从一些随课笔记总结起来，master method是用来预估divide and conquer算法的大O时间复杂度的公式；它要求divide的时候“所有sub-problems的规模都相等”才能适用。<br/>
要使用master method, 首先要将算法的时间消耗函数写成递推公式形式：
$$T(n) &lt;= aT(\frac{n}{b}) + O(n^d)$$
其中T(n)是本层递归所消耗的时间，$T(\frac{n}{b})$自然就是下一层递归所消耗的时间了，b就是每次往“下层”递归调用时问题规模缩小的倍率，a就是代码中递归调用的个数；$O(n^d)$ 是将递归调用之外的其它代码的时间开销写成关于输入规模n的指数形式，d就是这个指数。<br/>
基础情况： 当n足够小时，T(n) &lt;= 一个常数<br/>
a,b,d与输入规模无关。<br/>
那么，根据a,b,d的情况，T(n)可能被表示为三种情况：<br/>
<img src="/images/masterMethod.png" title="Master Method" alt="Master Method" /></p>

<!-- more -->


<p>对于这个式子，我个人的、不严格的、直觉的理解就是：</p>

<ol>
<li>当$a = b^d$时，程序规模被divide之后，合并代价增大的幅度与程序规模缩小的幅度相当，所以复杂度公式中合并代价部分和切分、解决部分的复杂度都要算在里面</li>
<li>当$a &lt; b^d$时，合并代价增长快于切分、解决缩小幅度，所以复杂度公式中只算合并代价部分</li>
<li>当$a > b^d$时，切分、解决部分时间代价占主导，忽略递归调用以外的项，只写出divide and conquer递归调用部分的时间开销</li>
</ol>


<p>不过其实这个是有严格的证明的：<br/>
设$T(n) = aT(\frac{n}{b}) + cn^d$<br/>
对于第j层递归 ，运算量为：$a^j \times c \times (\frac{n}{b^j})^d$<br/>
即：$cn^d(\frac{a}{b^d})^j$，所以a和$b^d$的大小关系是关键！<br/>
进而总计算时间： $total work \leqslant cn^d \centerdot \sum\limits_{j=0}^{\log_bn}(\frac{a}{b^d})^j$, 然后通过这个式子，由a和$b^d$的大小关系可以较容易想通为什么master method会是上述这种三段分段函数的形式。<br/>
Week2作业是快排...写个快排倒是简单，可是作业要求要count快排过程中的比较次数...在作业论坛里面看到哀嚎声一片...毕竟实现只要稍微有点偏差，虽然同样是快排，确实很容易比较次数不一样。<br/>
值得一提的是讲解中给出的in-place的快排partition方法，就是不用建立额外的数组来进行partition，python示意代码如下：</p>

<pre><code>def partition(pivotIndex, arr):
    swap(arr, 0, pivotIndex)
    pivot = arr[0]
    i = 1 # index 0...i &lt; pivot
    j = 1 # index i...j &gt; pivot
    for k in range(1, len(arr)):
    if arr[k] &lt;= pivot :
        swap(arr, i, k)
        i += 1
        j += 1
    else:
        j += 1
    return (arr[1:i], pivot, arr[i:j])
</code></pre>

<p>另外，从快排的例子可以看出，若divide and conquer算法是基于某种比较结果，将问题规模初步divide and conquer的话，每一次比较“能否将问题划分为规模差不多均等的子问题”将很大地影响算法实际的执行效率。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[algo-class]第一周作业——Count Inversions]]></title>
    <link href="http://pfmiles.github.io/blog/algo-class-week-one-assignment-counting-inversions"/>
    <updated>2012-03-25T15:41:00+08:00</updated>
    <id>http://pfmiles.github.io/blog/algo-class-week-one-assignment-counting-inversions</id>
    <content type="html"><![CDATA[<p><a href="http://algo-class.org">algo-class</a>还是挺有意思的，一上来就讲merge sort；介绍了分治法以及"piggyback"的思路...当作是复习吧：</p>

<h3>分治法(divide and conquer)</h3>

<ol>
<li>divide into smaller problems</li>
<li>conquer sub-problems recursively</li>
<li>combine solutions of problems into one for the original problems</li>
</ol>


<p>而"piggyback"的意思就是：记住一些经典算法的实现，遇到类似问题的时候，可以将要解决的问题“搭载”到那些经典算法上面，一般都具有和那些经典算法相同的平均时间复杂度；相当于是把那些经典算法当作一个个“模式”或者“骨架”了(所以说平时经常听到的经典算法还是要熟悉熟悉的，很多地方能派上用场)。</p>

<p>这一周围绕merge sort来讲divide and conquer真是再合适不过了；而作业“Count Inversions”就是一个将场景piggyback到merge sort上的一个典型例子；  作业给出了一个包含10W行数据的文本文件，每一行一个随机数字，要求找出这10W个数字中的所有Inversions。我用python实现如下：</p>

<pre><code>def countInversions(arr):
    length = len(arr)
    if length == 0 or length == 1:
    return (0, arr) 
    mid = int(length / 2)
    (leftCount, leftSortedArr) = countInversions(arr[0:mid])
    (rightCount, rightSortedArr) = countInversions(arr[mid:length])
    (mergedCount, mergedSortedArr) = mergeCount(leftSortedArr, rightSortedArr)
    return (leftCount + rightCount + mergedCount, mergedSortedArr)

def mergeCount(lArr, rArr):
    count = 0
    mergedArr = []
    i = 0
    j = 0
    lenl = len(lArr)
    lenr = len(rArr)
    while i &lt; lenl and j &lt; lenr:
    if lArr[i] &gt; rArr[j]:
        count += lenl - i # key line
        mergedArr.append(rArr[j])
        j += 1
    else:
        mergedArr.append(lArr[i])
        i += 1
    if i &lt; lenl:
    mergedArr.extend(lArr[i:lenl])

    if j &lt; lenr:
    mergedArr.extend(rArr[j:lenr])
    return (count, mergedArr)

import sys
if len(sys.argv) &lt; 2:
    print 'usage: python countInversionInAFile path_to_file'
    exit(1)
numbers = [int(line) for line in open(sys.argv[1], 'r')]
print countInversions(numbers)[0]
</code></pre>

<p>程序或许想起来简单但实际上要正确还是要费点功夫的；有些地方没想到的还非得debug才能看清楚为什么，比如程序中标注为"key line"那里，本来我写的是<code>count += 1</code>的但怎么都不对，后来debug才看出来应该写<code>count += lenl - i</code>。</p>

<p>另外，本来打算跟2门课程的，但现在看来我这忙碌的程序员完全没有时间...只好放弃“机器人汽车”那门课目前专门跟这一门了，毕竟“算法”的可操作性要强一些...</p>
]]></content>
  </entry>
  
</feed>
